// types generated by typechain/truffle-v5
import { assert } from "chai"
import { KatieInstance } from "../types/truffle-contracts";
require("dotenv").config()
require("chai").use(require("chai-as-promised")).should();

const Katie = artifacts.require('Katie');

contract("Katie", ([creator, ...accounts]) => {
  let katie: KatieInstance;

  before(async () => {
    katie = await Katie.deployed();
  })

  describe("deployment", async () => {
    it("deploys successfully", async () => {
      const address = katie.address;
      console.log(address);
      assert.notEqual(address, "", "address is empty");
      assert.notEqual(address, "0x0", "address is empty");
      assert.notEqual(address, null, "address is empty");
    });

    it("has a name", async () => {
      const name = await katie.name();
      assert.equal(name, "Katie", "name invalid");
    });

    it("has a symbol", async () => {
      const name = await katie.symbol();
      assert.equal(name, "KATE", "symbol invalid");
    });

    it("matches the creator", async () => {
      const tokenId = 1;
      const owner = await katie.ownerOf(tokenId);
      console.log(`owner is ${owner}`);
      console.log(`creator is ${creator}`);
      assert.equal(owner, creator, "owner and creator mismatch")
    })
  });
})